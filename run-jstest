#!/usr/bin/python
import sys, os, getopt, subprocess

# First, parse the arguments.
test_path = './tests/'
test = None
shell = None
print_command = False
debugger = None

try:
    opts, args = getopt.getopt(sys.argv[1:], "cgs:p:", ["command", "debugger", "shell=", "testpath="])
    if len(args) != 1:
        raise getopt.GetoptError, "Please pass exactly one test to run"
except getopt.GetoptError, e:
    print "Error: %s" % str(e)
    print "Usage: run-jstest [-c, --command] [-g, --debugger] [-s, --shell=path/js] [-p, --testpath=path/tests/] path_to_test"
    sys.exit(2)

for opt, arg in opts:
    if opt in ('-c', '--command'):
        print_command = True
    elif opt in ('-g', '--debugger'):
        debugger = 'gdb'
    elif opt in ('-s', '--shell'):
        shell = arg
    elif opt in ('-p', '--testpath'):
        test_path = arg
    else:
        print "unknown argument %s" % opt
        sys.exit(2)

test = args[0]

# We work on absolute paths. We will make them relative (for nicer printing)
# later.
test_path = os.path.abspath(test_path)
if not os.path.isdir(test_path):
    raise TypeError("Error: test_path %s is not a directory" % test_path)

if shell is None:
    shell = "./dbg-obj/js"
shell = os.path.abspath(shell)
if not os.path.isfile:
    raise TypeError("Error: shell %s does not exist %s" % shell)

full_test_path = os.path.abspath(os.path.join(test_path, test))
if not os.path.isfile(full_test_path):
    raise TypeError("Error: full_test_path %s is not a file" % full_test_path)

# Build up the list of shell.js files that we have to pass to the test.
shell_files = []
cur_shell = os.path.dirname(full_test_path)
while True:
    shell_file = os.path.join(cur_shell, "shell.js")
    if not os.path.isfile(shell_file):
        raise TypeError("Error: missing shell file at %s" % shell_file)
    shell_files.append(os.path.relpath(shell_file))
    shell_files.append("-f")
    if cur_shell == test_path:
        break
    cur_shell = os.path.dirname(cur_shell)

shell_files.reverse()

# TODO Don't always pass -j
# Initial command: shell -j -f shell.js -f js1_6/shell.js js1_6/../test.js
command = [ os.path.relpath(shell), '-j' ] + shell_files + [ os.path.relpath(full_test_path) ]

# Debugger adds a 'gdb --args <initial command>'
if debugger is not None:
    command = [ 'gdb', '--args' ] + command

# If we're printing the command do that instead of...
if print_command:
    print ' '.join(command)
    sys.exit(0)

# ...executing it.
subprocess.call(command)
