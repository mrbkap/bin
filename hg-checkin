#!/usr/bin/python
import sys, os, getopt

def get_change_info(revname):
    '''Returns a 3-tuple of files changed, files added, files deleted for a
    given revision'''
    command = "hg log -r '%s' --template='{file_adds}\n{file_dels}\n{file_mods}\n'" % revname

    output = os.popen(command);

    additions = output.readline().split();
    deletions = output.readline().split();
    changes = output.readline().split();
    return (additions, deletions, changes)

def check_up_to_date(files, expected):
    '''Ensures that files (which are already tracked in CVS and aren't being
    deleted) are truly up to date.'''
    outdated = []
    if len(files) is 0:
        return outdated

    for line in os.popen("cvs -n -q update %s 2>/dev/null" % \
            ' '.join(files)).readlines():
        # CVS is chatty (evin with the -q flag), so ignore lines like:
        # cvs update: conflicts found in bar
        if line[:2] not in ("U ", "M ", "C ", "A ", "R "):
            continue
        (status, fname) = line.split(' ', 1)

        # Make sure to ignore unknown files as well.
        if status is not expected:
            print "(%s) %s %s" % (expected, status, fname.strip())
            outdated.append((status, fname.strip()))
    return []

# First, parse the arguments.
revname = None
message = None

try:
    opts, args = getopt.getopt(sys.argv[1:], "m:", ["message="])
    if len(args) > 1:
        raise getopt.GetoptError, "only pass 1 revision"
except getopt.GetoptError, e:
    print "Error: %s" % str(e)
    print "Usage: hg-checkin [-m message] [revision]"
    sys.exit(2)

for opt, arg in opts:
    if opt in ('-m', '--message'):
        message = arg
    else:
        print "unknown argument %s" % opt
        sys.exit(2)

if len(args) is 1:
    revname = args[0]
else:
    revname = "tip"

# Gather information about the given revision.
(additions, deletions, changes) = get_change_info(revname)

def check_outdated(outdated):
    trans = { "C" : "conflicted" }
    if len(outdated) > 0:
        print "Error:\n%s" '\n'.join(["%s was %s" % \
                (i[1], trans[i[0]]) for i in outdated])
        raise "Outdated files found"

check_outdated(check_up_to_date(changes, 'M'))
check_outdated(check_up_to_date(additions, '?'))
check_outdated(check_up_to_date(deletions, 'U'))

additionsStr = ' '.join(additions)
deletionsStr = ' '.join(deletions)

# TODO Rollback!
if len(additions) > 0:
    # TODO Add the directory if it isn't already tracked by CVS.
    if os.system("cvs add %s" % additionsStr) is not 0:
        print "adding failed"
        sys.exit(1)

if len(deletions) > 0:
    if os.system("cvs rm %s" % deletionsStr) is not 0:
        print "deleting failed"
        sys.exit(1)

if message is None:
    if os.system("cvs commit %s %s %s" % (' '.join(changes), additionsStr,
        deletionsStr)) is not 0:
        print "committing failed"
        sys.exit(1)
else:
    if os.system("cvs commit -m'%s' %s %s %s" % (message, ' '.join(changes),
        additionsStr, deletionsStr)) is not 0:
        print "committing failed"
        sys.exit(1)
